### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CartItem {
  id: Int!
  item: Item!
  itemId: Int!
  quantity: Int!
  user: User!
  userId: Int!
}

input CartItemItemIdUserIdCompoundUniqueInput {
  itemId: Int!
  userId: Int!
}

input CartItemWhereUniqueInput {
  id: Int
  itemId_userId: CartItemItemIdUserIdCompoundUniqueInput
}

scalar DateTime

type Item {
  createdAt: DateTime!
  description: String!
  id: Int!
  image: String
  largeImage: String
  owner: User!
  ownerId: Int!
  price: Int!
  title: String!
  updatedAt: DateTime
}

input ItemOrderByInput {
  createdAt: OrderBy
}

input ItemWhereUniqueInput {
  id: Int
}

type Mutation {
  addToCart(itemId: Int!): CartItem
  checkout(token: String!): Order!
  createItem(description: String!, image: String, largeImage: String, price: Int!, title: String!): Item!
  deleteCartItem(id: Int!): CartItem!
  deleteItem(id: Int!): Item!
  requestPasswordReset(email: String!): SucessMessage
  resetPassword(confirmPassword: String!, password: String!, resetToken: String!): User
  signin(email: String!, password: String!): User
  signout: SucessMessage
  signup(email: String!, name: String!, password: String!): User
  updateItem(description: String, id: Int!, image: String, largeImage: String, price: Int, title: String): Item!
}

type Order {
  charge: String!
  id: Int!
  items(after: OrderItemWhereUniqueInput, before: OrderItemWhereUniqueInput, first: Int, last: Int): [OrderItem!]!
  label: String
  total: Int!
  user: User!
  userId: Int!
}

enum OrderBy {
  asc
  desc
}

type OrderItem {
  description: String!
  id: Int!
  image: String!
  order: Order!
  price: Int!
  quantity: Int!
  title: String!
}

input OrderItemWhereUniqueInput {
  id: Int
}

input OrderWhereUniqueInput {
  id: Int
}

type Query {
  allOrders: [Order!]
  getMyCart: [CartItem]
  item(where: ItemWhereUniqueInput!): Item
  items(orderBy: ItemOrderByInput, search: String, skip: Int, take: Int): [Item!]!
  itemsCount: Int!
  me: User
  order(where: OrderWhereUniqueInput!): Order
  searchItems(searchString: String!): [Item!]
  user(where: UserWhereUniqueInput!): User
}

type Role {
  assignedTo(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  canManageCart: Boolean!
  canManageOrders: Boolean!
  canManageProducts: Boolean!
  canManageRoles: Boolean!
  canManageUsers: Boolean!
  canSeeOtherUsers: Boolean!
  id: Int!
  name: String!
}

type SucessMessage {
  message: String
}

type User {
  cart(after: CartItemWhereUniqueInput, before: CartItemWhereUniqueInput, first: Int, last: Int): [CartItem!]!
  email: String!
  id: Int!
  name: String!
  orders(after: OrderWhereUniqueInput, before: OrderWhereUniqueInput, first: Int, last: Int): [Order!]!
  role: Role!
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
