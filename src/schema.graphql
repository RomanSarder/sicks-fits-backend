### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CartItem {
  id: Int!
  item: Item!
  quantity: Int!
  user: User!
}

input CartItemCreateInput {
  item: ItemCreateOneWithoutCartItemInput!
  quantity: Int
  user: UserCreateOneWithoutCartInput!
}

input CartItemWhereUniqueInput {
  id: Int
}

scalar DateTime

type Item {
  createdAt: DateTime!
  description: String!
  id: Int!
  image: String
  largeImage: String
  price: Int!
  title: String!
  updatedAt: DateTime
}

input ItemCreateOneWithoutCartItemInput {
  connect: ItemWhereUniqueInput
  connectOrCreate: ItemCreateOrConnectWithoutCartItemInput
  create: ItemCreateWithoutCartItemInput
}

input ItemCreateOrConnectWithoutCartItemInput {
  create: ItemCreateWithoutCartItemInput!
  where: ItemWhereUniqueInput!
}

input ItemCreateWithoutCartItemInput {
  createdAt: DateTime
  description: String!
  image: String
  largeImage: String
  price: Int!
  title: String!
  updatedAt: DateTime
}

input ItemOrderByInput {
  createdAt: OrderBy
}

input ItemWhereUniqueInput {
  id: Int
}

type Mutation {
  createCartItem(data: CartItemCreateInput!): CartItem!
  createItem(description: String!, image: String, largeImage: String, price: Int!, title: String!): Item!
  deleteItem(id: Int!): Item!
  requestPasswordReset(email: String!): SucessMessage
  resetPassword(confirmPassword: String!, password: String!, resetToken: String!): User
  signin(email: String!, password: String!): User
  signout: SucessMessage
  signup(email: String!, name: String!, password: String!): User
  updateItem(description: String, id: Int!, image: String, largeImage: String, price: Int, title: String): Item!
}

enum OrderBy {
  asc
  desc
}

enum Permission {
  ADMIN
  ITEMCREATE
  ITEMDELETE
  ITEMUPDATE
  PERMISSIONUPDATE
  USER
}

type Query {
  getMyCart(userId: Int): [CartItem]
  item(where: ItemWhereUniqueInput!): Item
  items(orderBy: ItemOrderByInput, search: String, skip: Int, take: Int): [Item!]!
  itemsCount: Int!
  me: User
  searchItems(searchString: String!): [Item!]
  user(where: UserWhereUniqueInput!): User
}

type SucessMessage {
  message: String
}

type User {
  cart(after: CartItemWhereUniqueInput, before: CartItemWhereUniqueInput, first: Int, last: Int): [CartItem!]!
  email: String!
  id: Int!
  name: String!
  permissions: [Permission!]!
}

input UserCreateOneWithoutCartInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutcartInput
  create: UserCreateWithoutCartInput
}

input UserCreateOrConnectWithoutcartInput {
  create: UserCreateWithoutCartInput!
  where: UserWhereUniqueInput!
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutCartInput {
  email: String!
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  resetToken: String
  resetTokenExpiry: Float
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
